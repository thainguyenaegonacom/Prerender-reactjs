{"version":3,"sources":["components/BlockAllBrands/index.tsx"],"names":["alphabet","BlockAllBrands","data","brands","reduce","r","e","group","name","indexOf","children","push","resultGroupBrandsAlphabet","Object","values","className","headline","map","i","index","href","sort","a","b","localeCompare","item","id","brand_page","relative_url","dangerouslySetInnerHTML","__html","memo"],"mappings":"uGAAA,iCAIMA,EAAW,CACf,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,KAGF,SAASC,EAAT,GAAkD,IAAxBC,EAAuB,EAAvBA,KAClBC,EAASC,iBACbF,EAAKC,QACL,SAACE,EAAQC,GAEP,IAAIC,EAAQD,EAAEE,KAAK,GAUnB,OATa,KAATD,GAA0B,KAATA,IAA4C,GAA5BP,EAASS,QAAQF,MACpDA,EAAQ,KAILF,EAAEE,GAEFF,EAAEE,GAAOG,SAASC,KAAKL,GAFbD,EAAEE,GAAS,CAAEA,QAAOG,SAAU,CAACJ,IAIvCD,IAET,IAEIO,EAA4BC,OAAOC,OAAOX,GAChD,OACE,mCACE,0BAASY,UAAU,2BAAnB,UACE,qBAAKA,UAAU,YAAf,SACE,mCAAIb,QAAJ,IAAIA,OAAJ,EAAIA,EAAMc,aAEZ,qBAAKD,UAAU,eAAf,SACGE,cAAIjB,GAAU,SAACkB,EAAQC,GAAT,OACb,qBAAiBJ,UAAU,uBAA3B,SACE,mBAAGK,KAAI,WAAMF,GAAb,SAAmBA,KADXC,QAKd,qBAAKJ,UAAU,iBAAf,SACGH,EACES,MAAK,SAACC,EAAQC,GAAT,OAAoBD,EAAEf,MAAMiB,cAAcD,EAAEhB,UACjDU,KAAI,SAACQ,EAAWN,GAAZ,OACH,sBAAKO,GAAID,EAAKlB,MAAmBQ,UAAU,yBAA3C,UACE,+BAAOU,EAAKlB,QACZ,6BACGU,cAAIQ,EAAKf,UAAU,SAACQ,GAAD,eAClB,6BACE,mBACEH,UAAS,WAAM,OAADG,QAAC,IAADA,GAAA,UAAAA,EAAGS,kBAAH,eAAeC,cAAe,GAAK,aACjDR,KAAI,OAAEF,QAAF,IAAEA,GAAF,UAAEA,EAAGS,kBAAL,aAAE,EAAeC,aACrBC,wBAAyB,CAAEC,OAAQZ,EAAEV,iBARrBW,aAwBzBY,yBAAK9B","file":"static/js/14.3a8301c5.chunk.js","sourcesContent":["import React, { memo } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { map, reduce } from 'lodash';\r\n\r\nconst alphabet = [\r\n  '#',\r\n  'A',\r\n  'B',\r\n  'C',\r\n  'D',\r\n  'E',\r\n  'F',\r\n  'G',\r\n  'H',\r\n  'I',\r\n  'J',\r\n  'K',\r\n  'L',\r\n  'M',\r\n  'N',\r\n  'O',\r\n  'P',\r\n  'Q',\r\n  'R',\r\n  'S',\r\n  'T',\r\n  'U',\r\n  'V',\r\n  'W',\r\n  'X',\r\n  'Y',\r\n  'Z',\r\n];\r\n\r\nfunction BlockAllBrands({ data }: { data: any }) {\r\n  const brands = reduce(\r\n    data.brands,\r\n    (r: any, e: any) => {\r\n      // get first letter of name of current element\r\n      let group = e.name[0];\r\n      if (group == '#' || (group != '#' && alphabet.indexOf(group) == -1)) {\r\n        group = '#';\r\n      }\r\n\r\n      // if there is no property in accumulator with this letter create it\r\n      if (!r[group]) r[group] = { group, children: [e] };\r\n      // if there is push current element to children array for that letter\r\n      else r[group].children.push(e);\r\n      // return accumulator\r\n      return r;\r\n    },\r\n    {},\r\n  );\r\n  const resultGroupBrandsAlphabet = Object.values(brands);\r\n  return (\r\n    <>\r\n      <section className=\"blk-all-brands container\">\r\n        <div className=\"box-title\">\r\n          <p>{data?.headline}</p>\r\n        </div>\r\n        <div className=\"box-alplabet\">\r\n          {map(alphabet, (i: any, index: number) => (\r\n            <div key={index} className=\"box-alplabet__detail\">\r\n              <a href={`#${i}`}>{i}</a>\r\n            </div>\r\n          ))}\r\n        </div>\r\n        <div className=\"box-all-brands\">\r\n          {resultGroupBrandsAlphabet\r\n            .sort((a: any, b: any) => a.group.localeCompare(b.group))\r\n            .map((item: any, index: any) => (\r\n              <div id={item.group} key={index} className=\"box-all-brands__detail\">\r\n                <span>{item.group}</span>\r\n                <ul>\r\n                  {map(item.children, (i: any) => (\r\n                    <li>\r\n                      <a\r\n                        className={`${i?.brand_page?.relative_url ? '' : 'un-active'}`}\r\n                        href={i?.brand_page?.relative_url}\r\n                        dangerouslySetInnerHTML={{ __html: i.name }}\r\n                      ></a>\r\n                    </li>\r\n                  ))}\r\n                </ul>\r\n              </div>\r\n            ))}\r\n        </div>\r\n      </section>\r\n    </>\r\n  );\r\n}\r\nBlockAllBrands.propTypes = {\r\n  data: PropTypes.object,\r\n};\r\n\r\nexport default memo(BlockAllBrands);\r\n"],"sourceRoot":""}